syntax = "proto3";

import "geometry_msgs.proto";
import "openscenario_msgs.proto";
package simulation_api_schema;

/**
 * Result of the request
**/
message Result
{
    bool success = 1; // If true, the request was succeeded
    string description = 2; // Description of why the request was failed.
}

/**
 * Parameter configuration of the lidar sensor
**/
message LidarConfiguration
{
    string entity = 1; // Name of the eneity which you want to attach lidar.
    double horizontal_resolution = 2; // Horizontal resolutions of the lidar.
    repeated double vertical_angles = 3; // Vertical resolutions of the lidar.
    double scan_duration = 4; // Scan duration of the lidar.
    string topic_name = 5; // Topic name of the lidar pointcloud.
}

/**
 * Parameter configuration of the detection sensor
**/
message DetectionSensorConfiguration
{
    string entity = 1; // Name of the eneity which you want to attach detection sensor.
    double update_duration = 2; // Update duration of the detection sensor.
    string topic_name = 3; // Topic name of the detection result.
}

/**
 * Updated entity status by the simulator.
**/
message UpdatedEntityStatus
{
    string name = 1; // Name og the eneity.
    openscenario_msgs.ActionStatus action_status = 2; // Action status of the entity.
    geometry_msgs.Pose pose = 3; // Pose of the entity in the map coordinate.
}

/**
 * Requests initializing simulation.
**/
message InitializeRequest
{
    double realtime_factor = 1; // Realtime factor of the simulation.
    double step_time = 2; // Step time of the simulation.
}

/**
 * Result of initializing simulation.
**/
message InitializeResponse
{
    Result result = 1; // Result
}

/**
 * Requests updating simulation frame.
**/
message UpdateFrameRequest
{
    double current_time = 1; // Current simulation time
}

/**
 * Response of updating simulation frame.
**/
message UpdateFrameResponse
{
    Result result = 1; // Result
}

/**
 * Requests spawning vehicle entity.
**/
message SpawnVehicleEntityRequest
{
    openscenario_msgs.VehicleParameters parameters = 1; // Parameters of vehicle entity.
    bool is_ego = 2; // If true, the entity is Ego vehicle. (Autoware vehicle.)
}

message SpawnVehicleEntityResponse
{
    Result result = 1;
}

message SpawnPedestrianEntityRequest
{
    openscenario_msgs.PedestrianParameters parameters = 1;
}

message SpawnPedestrianEntityResponse
{
    Result result = 1;
}

message DespawnEntityRequest
{
    string name = 1;
}

message DespawnEntityResponse
{
    Result result = 1;
}

message UpdateEntityStatusRequest
{
    repeated openscenario_msgs.EntityStatus status = 1;
}

message UpdateEntityStatusResponse
{
    Result result = 1;
    repeated UpdatedEntityStatus status = 2;
}

message AttachLidarSensorRequest
{
    LidarConfiguration configuration = 1;
}

message AttachLidarSensorResponse
{
    Result result = 1;
}

message AttachDetectionSensorRequest
{
    DetectionSensorConfiguration configuration = 1;
}

message AttachDetectionSensorResponse
{
    Result result = 1;
}

message UpdateSensorFrameRequest
{
    double current_time = 1;
}

message UpdateSensorFrameResponse
{
    Result result = 1;
}
